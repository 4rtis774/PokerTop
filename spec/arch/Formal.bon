static_diagram STATIC_DIAGRAM
component
  cluster MAUSCHELN_CLUSTER
  component

    class DECK
    indexing
      about: "A deck of playing cards.    ";    
      author: "Rasmus Nielsen";
    feature
      make
      isCut: BOOLEAN
        ensure
          Result /= Void;
          -- \result = cut;
        end
      isShuffled: BOOLEAN
        ensure
          Result /= Void;
          -- \result = shuffled;
        end
      cutDeck
        -> numberOfCards: INTEGER
        require
          numberOfCards /= Void;
          isShuffled;
          not isCut;
        ensure
          delta deck;
          isCut;
        end
      shuffleDeck
        -> numberOfPlayers: INTEGER
        require
          numberOfPlayers /= Void;
          3 <= numberOfPlayers;
          numberOfPlayers <= 6;
        ensure
          deck.count = numberOfPlayers * 8 + 4;
        end
      pop: CARD
        require
          isShuffled;
          isCut;
          0 < deck.count;
        ensure
          delta deck;
          Result /= Void;
          deck.count = old(deck.count) - 1;
        end
    feature{NONE}
      COMPLETE_DECK: SET
        ensure
          Result = old COMPLETE_DECK;
        end
      cut: BOOLEAN
        ensure
          Result /= Void;
        end
      shuffled: BOOLEAN
        ensure
          Result /= Void;
        end
      theDeck: STACK
        ensure
          Result /= Void;
        end
    -- invariant
      -- (deck.size() = 52 || deck.size() = 44 && (ERROR)) or (deck.size() = 36 && (ERROR)) or (deck.size() = 28 && (ERROR));
    end --class DECK
    
    
    class HAND
    indexing
      about: "A players hand.    ";    
      author: "Rasmus Nielsen";
    feature
      make
      getHand: SET
        ensure
          Result /= Void;
        end
      addCard
        -> card: CARD
        require
          card /= Void;
          not hand.contains(card);
          5 < hand.count;
        ensure
          delta hand;
          hand.contains(card);
          -- hand.size() = \old(hand.size()) + 1;
        end
      fold
        ensure
          delta hand;
          -- hand.size() = 0;
        end
      removeCard
        -> card: CARD
        require
          card /= Void;
          hand.contains(card);
        ensure
          delta hand;
          not hand.contains(card);
          -- hand.size() = \old(hand.size()) - 1;
        end
    feature{NONE}
      theHand: SORTED_SET
        ensure
          Result /= Void;
        end
    invariant
      5 <= hand.count;
    end --class HAND
    
    
    class PLAYER
    indexing
      about: "A player.    ";    
      author: "Rasmus Nielsen";
    feature
      make
        -> playerBalance: INTEGER
        -> playerName: STRING
        require
          playerBalance /= Void;
          playerName /= Void;
          0 < playerBalance;
        ensure
          name = playerName;
          balance = playerBalance;
        end
      getBalance: INTEGER
        ensure
          Result /= Void;
        end
      getHand: HAND
        ensure
          Result /= Void;
          -- \result = hand;
        end
      credit
        -> amount: INTEGER
        require
          amount /= Void;
          0 <= amount;
          amount <= balance;
        ensure
          delta balance;
          balance = old(balance - amount);
        end
      debit
        -> amount: INTEGER
        require
          amount /= Void;
          0 <= amount;
        ensure
          delta balance;
          balance = old(balance + amount);
        end
      getName: STRING
        ensure
          Result /= Void;
          -- \result = name;
        end
    feature{NONE}
      balance: INTEGER
        ensure
          Result /= Void;
        end
      hand: HAND
        ensure
          Result /= Void;
        end
      name: STRING
        ensure
          Result /= Void;
        end
    invariant
      0 <= balance;
    end --class PLAYER    

    effective class CARD
    indexing
      about: "Class to hold playing cards.    ";    
      author: "Rasmus Nielsen";
    --inherit
    --  COMPARABLE
    feature
      make
        -> theCardSuit: INTEGER
        -> theCardRank: INTEGER
        require
          theCardSuit /= Void;
          theCardRank /= Void;
          9824 <= theCardSuit;
          theCardSuit <= 9827;
          2 <= theCardRank;
          theCardRank <= 14;
        ensure
          delta {cardSuit, cardRank};
          -- cardSuit = theCardSuit;
          -- cardRank = theCardRank;
        end
      compareTo: INTEGER
        -> card: ANY
        require
          card /= Void;
        ensure
          Result /= Void;
        end
      equals: BOOLEAN
        -> card: ANY
        require
          card /= Void;
        ensure
          Result /= Void;
        end
      getCardRank: INTEGER
        ensure
          Result /= Void;
          -- \result = cardRank;
        end
      getCardSuit: INTEGER
        ensure
          Result /= Void;
          -- \result = cardSuit;
        end
      hashCode: INTEGER
        ensure
          Result /= Void;
        end
    feature{NONE}
      cardRank: INTEGER
        ensure
          Result /= Void;
        end
      cardSuit: INTEGER
        ensure
          Result /= Void;
        end
    invariant
      9824 <= cardSuit;
      cardSuit <= 9827;
      2 <= cardRank;
      cardRank <= 14;
    end --class CARD
    
    
    class GAME
    indexing
      about: "A game of Mauscheln.    ";    
      author: "Rasmus Nielsen";
    feature
      make
      getBackHand: PLAYER
      getMauschler: PLAYER
        ensure
          Result = mauschler;
        end
      getPot: INTEGER
        ensure
          Result /= Void;
          Result = pot;
        end
      getTrump: CARD
        ensure
          Result /= Void;
          Result = trump;
        end
      addPlayer
        -> player: PLAYER
        require
          player /= Void;
          not players.contains(player);
        ensure
          delta players;
          players.contains(player);
        end
      addPlayerToGame
        -> player: PLAYER
        require
          player /= Void;
          players.contains(player);
          0 < gamePlayers.count;
          not gamePlayers.contains(player);
        ensure
          delta gamePlayers;
          gamePlayers.contains(player);
          gamePlayers.count = old(gamePlayers.count);
        end
      removePlayer
        -> player: PLAYER
        require
          player /= Void;
          players.contains(player);
        ensure
          delta players;
          not players.contains(player);
        end
      resetGame
        ensure
          delta {gamePlayers, mauschler, trump};
          gamePlayers.count = 0;
          mauschler = Void;
          trump = Void;
        end
      rotateDealer
        ensure
          delta dealer;
        end
      setMauschler
        -> theMauschler: PLAYER
        require
          theMauschler /= Void;
          gamePlayers.count = 0;
        ensure
          delta {mauschler, gamePlayers};
          mauschler = theMauschler;
          gamePlayers.count = 1;
          gamePlayers.contains(theMauschler);
        end
      setTrump
        -> theTrump: CARD
        require
          theTrump /= Void;
          trump = Void;
        ensure
          delta trump;
          trump = theTrump;
        end
      getDealer: PLAYER
    feature{NONE}
      dealer: PLAYER
      deck: DECK
      gamePlayers: LIST
        ensure
          Result /= Void;
        end
      mauschler: PLAYER
      players: LIST
        ensure
          Result /= Void;
        end
      pot: INTEGER
        ensure
          Result /= Void;
        end
      trump: CARD
    invariant
      6 <= players.count;
      6 <= gamePlayers.count;
    end --class GAME
  end --cluster MAUSCHELN_CLUSTER

end --static diagram
