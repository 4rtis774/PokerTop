-- Used the system_chart in order to make it work without complaining about defining a system. 
system_chart POKER_SYSTEM
    indexing
        author: "Chris";
    explanation
        "This hopefully will be a fully functional funny NL Texas Hold 'Em poker application."
    cluster POKER_PLAYER description "Player cluster."
    cluster UTILITIES description "Utilities to implement functionality such as initilization."
    cluster POKER_TABLE description "Table cluster."  
end

static_diagram POKER_SYSTEM
component 
    cluster POKER_TABLE
    component
        class TABLE
        indexing
            about: "A poker table."
        feature
            size: INTEGER -- Size of the poker table.
            seats: SET[SEAT] -- A set of seats
            
            get_size: INTEGER 
	            ensure
	                Result = size;
	            end -- get_size
            
            make: TABLE -- Construct table  
                -> the_new_size: INTEGER  -- Table size
                require
                    2 <= the_new_size;
                    10 >= the_new_size;
                ensure
                    Result.size = the_new_size;
                    get_size = the_new_size;
                end --make table
            
            count_empty_seats: INTEGER
	            require
	                get_seats;
	            ensure
	                Result /= Void;
	            end
                
        invariant
            seats.count >=2;
            seats.count <=10;
            2 <= size ;
            10 >= size ;                
        end -- class TABLE
        
        class SEAT
        indexing
            about: "Representation of a seat at the table."
        feature
            position: INTEGER --Position of the seat at the table.
            player: PLAYER -- Name of player sitting in this seat.
            
            -- I am kind of thinking having only constructor for SEAT 
            make: SEAT
                -> new_position: INTEGER
	            require
	               new_position /= Void;
	            ensure
	                Result.position = new_position;
                    --Result.player.set_name = "empty" ;
	            end -- make seat               
            
            get_position: INTEGER
	            ensure
	                Result = position;
	            end --get_position
            
            get_player: PLAYER
	            ensure
	                Result = player;
	            end --get_player
            
            -- Check out how can add more functionality
            is_availiable: BOOLEAN
	            require
	                get_player;
	            end
            
            set_player
                -> new_player: PLAYER
                require
                    get_player;
                    new_player /= Void;
                ensure
                    not is_availiable();
                    get_player = new_player
                end
                                                        
        end -- class SEAT
        
        class DEALER
        indexing
            about: "Dealer of the table"
        feature
            -- Actions for each feature are implemented in each class not in dealer.
            pot: POT
            blind: BLIND
            ante: ANTE
            deck: DECK
            button: BUTTON
            game_state: SET[VALUES]
            
            make: DEALER
                -> small_blind: REAL
                -> big_blind: REAL
                -> ante_size: REAL
                require
                    small_blind >=0;
                    big_blind >=0;
                    ante_size >=0;
                ensure
                    Result.pot = 0;
                    Result.deck /= Void;
                    Result.blind.get_small_blind = small_blind;
                    Result.blind.get_big_blind = big_blind;
                    Result.ante.get_ante = ante_size;
                end
            
        invariant
            -- Since we made the checks in each class seperatly I am not really
            -- sure if these invariants above are necessary.
            pot >= 0;
            blind.get_small_blind >=0;
            blind.get_big_blind >=0;
            ante.get_ante >=0;
        end -- class DEALER
        
        class PLAYER
        indexing
            about: "A poker player";
        --Possible need to define scope {NONE}
        feature
            name: STRING  -- Player's name in order to distinguish them on the table.
            bank: BANK -- Player's bank    
            is_active: BOOLEAN -- Defines if player is active(holding cards) in current hand
            cards: LIST[CARD] -- Player's cards 0 or 2
            
            make: PLAYER
                -> new_name: STRING
                require
                   new_name /= Void;
                ensure
                    Result.name = new_name;
                    Result.bank.set_amount(0);
                end -- make player

            -- Although I defined actions as special classifiers in informal bon
            -- reaching to this point my mind says to implement them as methods
            -- for class player... I don't know what is the truth out there though...
            
            fold
                require
                    is_active;
                ensure
                    cards.count =0;
                    not is_active;
                end
            
            stay
                require
                    is_active;
                ensure
                    cards.count =2;
                end
                
            call
                require
                    is_active;
                ensure
                    delta bank;
                end                    

            raise
                -> raise_bet: REAL
                require
                    is_active;
                    raise_bet >=0;
                ensure
                    delta bank;                    
                end    
            
            get_name: STRING
                ensure
                    Result = name;
                end --get_name
            
            get_bank_amount: REAL
                require
                    bank.get_amount >= 0;                    
                ensure
                    Result = bank.get_amount();
                end -- get_bank_amount

            add_to_bank
                -> value_to_add: REAL
                require
                    value_to_add >= 0;
                    get_bank_amount();
                ensure
                    get_bank_amount = old(get_bank_amount) + value_to_add;
                end -- add to bank 
            
            subtract_from_bank
                -> value_to_sub: REAL
	            require
	                value_to_sub >= 0;
	                value_to_sub <= get_bank_amount();
	            ensure
	                get_bank_amount = old(get_bank_amount) - value_to_sub;
	            end -- subtract
            
            show_cards
                require
                    cards.count >=0;
                end
            
        invariant
            cards.count>=0;
            cards.count<=2;
            0 <= get_bank_amount();                               
        end -- class PLAYER
                
    end -- cluster POKER_TABLE
    
    cluster DEALER_ACTION
    component
        
        class CARD
        indexing
            about: "A card of the deck."
        feature
            value: INTEGER
            suit: INTEGER
            
            make: CARD
                -> card_value: INTEGER
                -> card_suit: INTEGER
                require
                    1 <= card_value;
                    13 >= card_value;
                    1 <=  card_suit;
                    4 >= card_suit;
                ensure
                    value = card_value;
                    suit = card_suit;
                end -- Constructor
                
        invariant
			1 <= value;
			13 >= value;
			1 <= suit;
			4 >= suit;
        end -- class CARD

        class DECK
        indexing
            about: "Deck of all the cards"
        feature
            deck: SET[CARD] -- Set with all our cards for the game

            make: DECK
	            ensure
	                deck.count = 52;                
	            end
               
            get_deck: DECK
               ensure
                   Result.deck = deck;
               end

            shuffle_deck
                require
                    deck.count = 52;
                end

            deal_players
                require
                    deck.count = 52;
                ensure
                    delta deck;               
                end

            deal_flop
                ensure
                    deck.count = old(deck.count) -3;
                end

            deal_turn
                ensure
                    deck.count = old(deck.count) -1;
                end

            deal_river
                ensure
                    deck.count = old(deck.count) -1;
                end 
                                
        invariant
            deck.count <= 52;
            deck.count >= 0;
        end -- class DECK

        class BLIND
        indexing
            about: "Blind of the hand."
        feature
            small: REAL -- Represents the small blind
            big: REAL -- Represents the big blind

            make: BLIND
                -> small_size: REAL
                -> big_size: REAL
                require
                    small_size >= 0;
                    big_size >= 0;
                ensure
                    small = small_size;
                    big = big_size;
                end -- Constructor

            get_blind: BLIND
	            ensure
	               Result.small = small;
	               Result.big = big;
	            end
            
            get_small_blind: REAL
                ensure
                   Result.small = small;
                end
            
            get_big_blind: REAL
                ensure
                   Result.big = big;
                end
                
        invariant
            0 <= small;
            0 <= big;
        end -- class BLIND

        class ANTE
        indexing
            about: "Ante of the hand."
        feature
            size: REAL -- Size of the ante.

	        make: ANTE -- Constructor of ante
	            -> ante_size: REAL
		        require
		           ante_size >= 0;
		        ensure
		           size = ante_size;
		        end -- make ANTE

	        get_ante: REAL
		        ensure
		           Result = size;
		        end -- get_ante_size

	        set_ante
	           -> new_ante_value: REAL
	           require
	               new_ante_value >= 0;
	           ensure
	               get_ante_size = new_ante_value;
	           end -- set_ante_size

	    invariant
	       0 <= size;    
        end -- class ANTE

        class BUTTON
        indexing
            about: "The button that defines where the deal starts from."
        feature
            position: INTEGER -- Simply will point to the seat that holds the button.

            make: BUTTON
	            ensure
	                position = 0; -- Where the seats start
	            end -- Constructor

            next_player
	            ensure
	                delta position;         
	            end
        
        end -- class BUTTON

        class POT
        indexing
            about: "Pot of the table."
        feature
            size: REAL -- Size of the pot amount of money inside.
            
            make: POT -- Construct pot
	            ensure
	                size = 0;
	            end

			get_pot_size: REAL
				ensure
	                Result = size;
				end --get_size
			
			add_to_pot_size
			    -> added_value: REAL
			    require
                    added_value >= 0;
                    get_pot_size;
                ensure
                    get_pot_size = old(get_pot_size) + added_value; 
                end
        invariant
            0 <= size;
        end -- class POT
    end --cluster DEALER_ACTION     
    
    cluster POKER_PLAYER
    component
        class BANK
        indexing
            about: "Bank of each player."
        feature
            amount: REAL -- Players amount of money
            
            make: BANK -- Create a new initialised bank object
	            ensure
	                amount = 0;
	            end

            get_amount: REAL -- What's the current amount of money in bank.
	            ensure
	              Result = amount;
	            end

            set_amount  -- Set a new amount for bank.
                -> the_new_amount: REAL  -- Bank's new amount
                require
                    the_new_amount >= 0;
                    0 <= the_new_amount;
                ensure
                    get_amount = the_new_amount;
                end
                
        invariant
            0 <= amount;                          
        end --class BANK
        
    end -- cluster POKER_PLAYER    
    
    cluster UTILITIES
    component
        class RANDOM_GENERATOR
            feature
                input: VALUE
        end -- RANDOM_GENERATOR
        
        class INPUT_HANDLING
            feature
                input: VALUE
        end -- INPUT_HANDLING
        
        class PRINT_HANDLING
            feature
                input: VALUE
        end -- PRINT_HANDLING
        
        class LOG_HANDLING
            feature
                input: VALUE
        end -- LOG_HANDLING
    end -- cluster UTILITIES
    
end-- cluster SYSTEM
